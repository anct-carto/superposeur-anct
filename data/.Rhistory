library(here)
fabt_geom <- fabt_init %>%
mutate(vague2 = as.numeric(stringr::str_extract(vague, "\\d+")))
View(fabt_geom)
fabt_geom <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)
fabt_geom <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id = paste("fabt-", row_number(), sep = ""))
fabt_geom <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id = sprintf("fabt-%02d", row_number()))
View(fabt_geom)
#Fabriques de territoires
fabt_data <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id = sprintf("fabt-%02d", row_number()))
fabt_geom <- ma_fonction(fabt_data, type="ctr")
#TRANSFORMER LES DONNEES - creation d'une fonction-------------------------------------------------------
ma_fonction<- function(data_init, type){
fichier_init <- deparse(substitute(data_init))
if (type == "ctr") {
geom_com <- geom_com_ctr
} else if (type == "polygon") {
geom_com <- geom_com_polygon
} else {
stop("Le paramètre 'type' doit être soit 'ctr' ou 'polygon'")
}
fichier<- data_init%>%
left_join(geom_com, by ="insee_com") %>%
st_as_sf()
fichier_4326<- st_transform(fichier, crs= 4326)
return(fichier_4326)
}
fabt_geom <- ma_fonction(fabt_data, type="ctr")
#Fabriques de territoires
fabt_data <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id = sprintf("fabt-%02d", row_number()))%>%
rename('insee_com'='code_insee')
fabt_geom <- ma_fonction(fabt_data, type="ctr")
View(fabt_geom)
View(fabt_data)
#Fabriques de territoires
fabt_data <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id_fabt = sprintf("fabt-%02d", row_number()))%>%
rename('insee_com'='code_insee')
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
#
# fs_geom<-filter(fs_init,format_fs=='Site principal')%>%
#   ma_fonction(., type="ctr")%>%
#   rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
#   select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
#   mutate(id_territoire2= paste0('fs-',id_territoire))%>%
#   select(-id_territoire)%>%
#   rename('id_territoire'='id_territoire2')%>%
#   group_by(id_geo)%>%
#   summarise(lib_geo= paste0(unique(lib_geo)),
#             id_territoire= paste0(unique(id_territoire), collapse = '; '),
#             liste_geo= paste0(unique(lib_geo), ' (', id_geo, ')',collapse = '; '),
#             lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
#EXPORTS FORMAT GEOJSON -----------------
st_write(obj = acv_geom,
dsn = here(paste0("geom/geojsonV2/acv_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
#
# fs_geom<-filter(fs_init,format_fs=='Site principal')%>%
#   ma_fonction(., type="ctr")%>%
#   rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
#   select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
#   mutate(id_territoire2= paste0('fs-',id_territoire))%>%
#   select(-id_territoire)%>%
#   rename('id_territoire'='id_territoire2')%>%
#   group_by(id_geo)%>%
#   summarise(lib_geo= paste0(unique(lib_geo)),
#             id_territoire= paste0(unique(id_territoire), collapse = '; '),
#             liste_geo= paste0(unique(lib_geo), ' (', id_geo, ')',collapse = '; '),
#             lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
#EXPORTS FORMAT GEOJSON -----------------
st_write(obj = acv_geom,
dsn = here(paste0("geom/geojsonV2/acv_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")
#Fabriques de territoires
fabt_data <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id_fabt = sprintf("fabt-%02d", row_number()))%>%
rename('insee_com'='code_insee', 'lib_fabt'='lib_projet')
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, adresse, n_vague)%>%
#
# fs_geom<-filter(fs_init,format_fs=='Site principal')%>%
#   ma_fonction(., type="ctr")%>%
#   rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
#   select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
#   mutate(id_territoire2= paste0('fs-',id_territoire))%>%
#   select(-id_territoire)%>%
#   rename('id_territoire'='id_territoire2')%>%
#   group_by(id_geo)%>%
#   summarise(lib_geo= paste0(unique(lib_geo)),
#             id_territoire= paste0(unique(id_territoire), collapse = '; '),
#             liste_geo= paste0(unique(lib_geo), ' (', id_geo, ')',collapse = '; '),
#             lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
#EXPORTS FORMAT GEOJSON -----------------
st_write(obj = acv_geom,
dsn = here(paste0("geom/geojsonV2/acv_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, adresse, n_vague)%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(unique(lib_geo), ' (', id_geo, ')',collapse = '; '),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, Adresse, n_vague)%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(unique(lib_geo), ' (', id_geo, ')',collapse = '; '),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
View(fabt_geom)
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, Adresse, n_vague)%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(lib_geo, ' (', id_geo, ')'),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, Adresse, n_vague)%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(lib_geo, ' (', id_geo[1], ')'),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
st_write(obj = fabt_geom,
dsn = here(paste0("geom/geojsonV2/fabt_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
#Telecharger les librairie
library(sf)
library(rgdal)
library(tidyverse)
library(readxl)
library(writexl)
library(RSQLite)
library(here)
geom_com_ctr <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/centroide-fr-drom-3395-gen.gpkg",
layer = "com")
geom_com_polygon <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
layer = "com")
#CRTE
crte_init<-read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/contrats-de-relance-et-de-transition-ecologique/liste-crte-com2023-20230823.csv", fileEncoding ="utf-8")
crte_init_list<-read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/contrats-de-relance-et-de-transition-ecologique/liste-crte-20230823.csv", fileEncoding ="utf-8")
crte_groupement<-read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/contrats-de-relance-et-de-transition-ecologique/liste-crte-grpt2023-20230823.csv", fileEncoding ="utf-8")
#TRANSFORMER LES DONNEES - creation d'une fonction-------------------------------------------------------
ma_fonction<- function(data_init, type){
fichier_init <- deparse(substitute(data_init))
if (type == "ctr") {
geom_com <- geom_com_ctr
} else if (type == "polygon") {
geom_com <- geom_com_polygon
} else {
stop("Le paramètre 'type' doit être soit 'ctr' ou 'polygon'")
}
fichier<- data_init%>%
left_join(geom_com, by ="insee_com") %>%
st_as_sf()
fichier_4326<- st_transform(fichier, crs= 4326)
return(fichier_4326)
}
View(crte_init)
View(crte_init_list)
View(crte_groupement)
#CRTE
crte_gpt_data <- crte_groupement %>%
group_by(id_crte)%>%
summarise(liste_geo= paste0(unique(lib_groupement),' (', siren_groupement, ')', collapse = '; '))
View(crte_gpt_data)
crte_geom<-ma_fonction(crte_init, type="polygon")%>%
separate_rows(id_crte, sep = " ; ")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_crte", "lib_territoire"="lib_crte")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
group_by(id_territoire)%>%
summarise()%>%
left_join(crte_init_list, by = c("id_territoire"="id_crte"))%>%
left_join(crte_gpt_data, by= c("id_territoire"="id_crte") )%>%
rename("lib_territoire"="lib_crte")
View(crte_geom)
#Telecharger les librairie
library(sf)
library(rgdal)
library(tidyverse)
library(readxl)
library(writexl)
library(RSQLite)
library(here)
#CRTE
crte_init<-read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/contrats-de-relance-et-de-transition-ecologique/liste-crte-com2023-20230823.csv", fileEncoding ="utf-8")
crte_init_list<-read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/contrats-de-relance-et-de-transition-ecologique/liste-crte-20230823.csv", fileEncoding ="utf-8")
crte_groupement<-read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/contrats-de-relance-et-de-transition-ecologique/liste-crte-grpt2023-20230823.csv", fileEncoding ="utf-8")
#TRANSFORMER LES DONNEES - creation d'une fonction-------------------------------------------------------
ma_fonction<- function(data_init, type){
fichier_init <- deparse(substitute(data_init))
if (type == "ctr") {
geom_com <- geom_com_ctr
} else if (type == "polygon") {
geom_com <- geom_com_polygon
} else {
stop("Le paramètre 'type' doit être soit 'ctr' ou 'polygon'")
}
fichier<- data_init%>%
left_join(geom_com, by ="insee_com") %>%
st_as_sf()
fichier_4326<- st_transform(fichier, crs= 4326)
return(fichier_4326)
}
#CRTE
crte_gpt_data <- crte_groupement %>%
group_by(id_crte)%>%
summarise(liste_geo= paste0(unique(lib_groupement),' (', siren_groupement, ')', collapse = '; '))
crte_geom<-ma_fonction(crte_init, type="polygon")%>%
separate_rows(id_crte, sep = " ; ")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_crte", "lib_territoire"="lib_crte")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
group_by(id_territoire)%>%
summarise()%>%
left_join(crte_init_list, by = c("id_territoire"="id_crte"))%>%
left_join(crte_gpt_data, by= c("id_territoire"="id_crte") )%>%
rename("lib_territoire"="lib_crte")
View(crte_geom)
crte_geom<-ma_fonction(crte_init, type="polygon")%>%
separate_rows(id_crte, sep = " ; ")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_crte", "lib_territoire"="lib_crte")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
group_by(id_territoire)%>%
summarise()%>%
left_join(crte_init_list, by = c("id_territoire"="id_crte"))%>%
left_join(crte_gpt_data, by= c("id_territoire"="id_crte") )%>%
rename("lib_territoire"="lib_crte")%>%
filter(id_territoire != 'crte-94-2B-4')
crte_geom<-ma_fonction(crte_init, type="polygon")%>%
separate_rows(id_crte, sep = " ; ")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_crte", "lib_territoire"="lib_crte")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
group_by(id_territoire)%>%
summarise()%>%
left_join(crte_init_list, by = c("id_territoire"="id_crte"))%>%
left_join(crte_gpt_data, by= c("id_territoire"="id_crte") )%>%
rename("lib_territoire"="lib_crte")
crte_geom <- crte_geom%>%
filter(id_territoire != 'crte-94-2B-4', id_territoire != 'crte-03-973-03', id_territoire != 'crte-03-973-04', id_territoire != 'crte-32-60-20' , id_territoire != 'crte-28-76-9', id_territoire != 'crte-28-27-13')
View(crte_geom)
st_write(obj = crte_geom,
dsn = here(paste0("geom/geojsonV2/crte_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
View(crte_geom)
View(crte_geom)
st_write(obj = crte_geom,
dsn = here(paste0("geom/geojsonV2/crte_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
#Fabriques de territoire
fabt_init<- read_excel("N:/DST/Carto/APPROCHE SECTORIELLE/MUTECO_INNOVATION/FABRIQUE_TERRITOIRE/2E_VAGUE/DATA/tabs/data_fabrique_territoires_11_23.xlsx")%>%
st_drop_geometry()%>%
select(-geom)
#Telecharger les librairie
library(sf)
library(rgdal)
library(tidyverse)
library(readxl)
library(writexl)
library(RSQLite)
library(here)
geom_com_ctr <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/centroide-fr-drom-3395-gen.gpkg",
layer = "com")
geom_com_polygon <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
layer = "com")
#Fabriques de territoire
fabt_init<- read_excel("N:/DST/Carto/APPROCHE SECTORIELLE/MUTECO_INNOVATION/FABRIQUE_TERRITOIRE/2E_VAGUE/DATA/tabs/data_fabrique_territoires_11_23.xlsx")%>%
st_drop_geometry()%>%
select(-geom)
#TRANSFORMER LES DONNEES - creation d'une fonction-------------------------------------------------------
ma_fonction<- function(data_init, type){
fichier_init <- deparse(substitute(data_init))
if (type == "ctr") {
geom_com <- geom_com_ctr
} else if (type == "polygon") {
geom_com <- geom_com_polygon
} else {
stop("Le paramètre 'type' doit être soit 'ctr' ou 'polygon'")
}
fichier<- data_init%>%
left_join(geom_com, by ="insee_com") %>%
st_as_sf()
fichier_4326<- st_transform(fichier, crs= 4326)
return(fichier_4326)
}
#Fabriques de territoires
fabt_data <- fabt_init %>%
mutate(n_vague = as.numeric(stringr::str_extract(vague, "\\d+")))%>%
arrange(n_vague)%>%
mutate(id_fabt = sprintf("fabt-%02d", row_number()))%>%
rename('insee_com'='code_insee', 'lib_fabt'='lib_projet')
fabt_geom <- ma_fonction(fabt_data, type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fabt", "lib_territoire"="lib_fabt")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, Adresse, n_vague)%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(lib_geo, ' (', id_geo[1], ')'),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
View(fabt_geom)
#France service
fs_init <- read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/france_services/liste-fs-20231106.csv", fileEncoding ="utf-8")
fs_com_init <- read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/france_services/liste-fs-com2023-20231106.csv", fileEncoding ="utf-8")
#FS
fs_geom<-filter(fs_init,format_fs=='Site principal')%>%
ma_fonction(., type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
mutate(id_territoire2= paste0('fs-',id_territoire))%>%
select(-id_territoire)%>%
rename('id_territoire'='id_territoire2')%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(unique(lib_geo), ' (', id_geo, ')',collapse = '; '),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
View(fs_geom)
#FS
fs_geom<-filter(fs_init,format_fs=='Site principal')%>%
ma_fonction(., type="ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_fs", "lib_territoire"="lib_fs")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire)%>%
mutate(id_territoire2= paste0('fs-',id_territoire))%>%
select(-id_territoire)%>%
rename('id_territoire'='id_territoire2')%>%
group_by(id_geo)%>%
summarise(lib_geo= paste0(unique(lib_geo)),
id_territoire= paste0(unique(id_territoire), collapse = '; '),
liste_geo= paste0(lib_geo, ' (', id_geo[1], ')'),
lib_territoire= paste0(unique(lib_territoire), collapse = '; '))
View(fs_geom)
st_write(obj = fs_geom,
dsn = here(paste0("geom/geojsonV2/fs_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
#Telecharger les librairie
library(sf)
library(rgdal)
library(tidyverse)
library(readxl)
library(writexl)
library(RSQLite)
com_geom <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
layer = "com")
View(com_geom)
#COMMUNES
com_geom_4326<- st_transform(com_geom, crs= 4326)
plot(com_geom$geom)
plot(com_geom_4326$geom)
st_write(obj = com_geom_4326,
dsn = here(paste0("geom/geojson/com_geom_4326.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
library(here)
com_geom_4326<- st_transform(com_geom, crs= 4326)
plot(com_geom$geom)
plot(com_geom_4326$geom)
st_write(obj = com_geom_4326,
dsn = here(paste0("geom/geojson/com_geom_4326.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
#Telecharger les librairie
library(sf)
library(rgdal)
library(tidyverse)
library(readxl)
library(writexl)
library(RSQLite)
library(here)
geom_com_ctr <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/centroide-fr-drom-3395-gen.gpkg",
layer = "com")
geom_com_polygon <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
layer = "com")
# geom_epci_polygon <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
#                             layer = "epci")
#LIRE LES DONNEES -------------------------------------------------------------
#Villages d'avenir
va_init <- read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/villages-davenir/liste-va-com2023-20240112.csv", fileEncoding ="utf-8")
View(va_init)
#ACV
acv_init <- read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/action-coeur-de-ville/liste-acv-com2023-20230802.csv", fileEncoding ="utf-8" )
View(acv_init)
#TRANSFORMER LES DONNEES - creation d'une fonction-------------------------------------------------------
ma_fonction<- function(data_init, type){
fichier_init <- deparse(substitute(data_init))
if (type == "ctr") {
geom_com <- geom_com_ctr
} else if (type == "polygon") {
geom_com <- geom_com_polygon
} else {
stop("Le paramètre 'type' doit être soit 'ctr' ou 'polygon'")
}
fichier<- data_init%>%
left_join(geom_com, by ="insee_com") %>%
st_as_sf()
fichier_4326<- st_transform(fichier, crs= 4326)
return(fichier_4326)
}
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_va", "lib_territoire"="lib_va")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)
va_geom <- ma_fonction(va_init, type = "ctr")
View(va_geom)
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.y" ,"id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com","id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com","id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo,  id_territoire, lib_territoire, date_signature)
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.x" ,"id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)
st_write(obj = va_geom,
dsn = here(paste0("geom/geojsonV2/va_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
e
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.x" ,"id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)%>%
group_by(id_territoire, lib_territoire, date_signature)%>%
summarise(liste_geo= paste0(unique(lib_geo),' (', id_geo, ')', collapse = '; '))
st_write(obj = va_geom,
dsn = here(paste0("geom/geojsonV2/va_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
st_write(obj = va_geom,
dsn = here(paste0("geom/geojsonV2/va_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
#Telecharger les librairie
library(sf)
library(rgdal)
library(tidyverse)
library(readxl)
library(writexl)
library(RSQLite)
library(here)
geom_com_ctr <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/centroide-fr-drom-3395-gen.gpkg",
layer = "com")
geom_com_polygon <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
layer = "com")
# geom_epci_polygon <- st_read("N://Transverse/Donnees_Obs/Donnees_SIG/ADMIN_STAT/map-process/public/france/2023/fr-drom/fr-drom-3395-gen.gpkg",
#                             layer = "epci")
#Villages d'avenir
va_init <- read.csv("N:/Transverse/Donnees_Obs/Donnees_Statistiques/ANCT/villages-davenir/liste-va-com2023-20240112.csv", fileEncoding ="utf-8")
#TRANSFORMER LES DONNEES - creation d'une fonction-------------------------------------------------------
ma_fonction<- function(data_init, type){
fichier_init <- deparse(substitute(data_init))
if (type == "ctr") {
geom_com <- geom_com_ctr
} else if (type == "polygon") {
geom_com <- geom_com_polygon
} else {
stop("Le paramètre 'type' doit être soit 'ctr' ou 'polygon'")
}
fichier<- data_init%>%
left_join(geom_com, by ="insee_com") %>%
st_as_sf()
fichier_4326<- st_transform(fichier, crs= 4326)
return(fichier_4326)
}
#VA
va_geom <- ma_fonction(va_init, type = "ctr")%>%
rename("id_geo"="insee_com", "lib_geo"="lib_com.x" ,"id_territoire"="id_va", "lib_territoire"="lib_com.y")%>%
select(id_geo, lib_geo, id_territoire, lib_territoire, date_signature)%>%
group_by(id_territoire, lib_territoire, date_signature)%>%
summarise(liste_geo= paste0(unique(lib_geo),' (', id_geo, ')', collapse = '; '))
st_write(obj = va_geom,
dsn = here(paste0("geom/geojsonV2/va_geom.geojson")),
driver = "GeoJSON", delete_layer = TRUE, append = FALSE)
View(va_geom)
